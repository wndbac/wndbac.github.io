{"meta":{"title":"WindBack的小站","subtitle":"世态人情，可当书读，可作戏看。","description":"世态人情，可当书读，可作戏看。","author":"WindBack","url":"https://wndbac.cn","root":"/"},"pages":[{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"404.html","permalink":"https://wndbac.cn/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"about/index.html","permalink":"https://wndbac.cn/about/index.html","excerpt":"","text":"关 于 我 关于我首先欢迎您的到来！ 前端初学者。 热爱技术，热爱创造。 闭关学习中~ 版权声明博客内的所有原创内容（包括但不限于文章、图像等）除特别声明外均采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议，任何人都可以自由传播，但不得用于商用且必须署名并以相同方式分享。 隐私原则本站内目前涉及到浏览者隐私的仅有留言区（文章评论）及访客统计。当您评论或浏览本站时，您的电子邮箱、Cookies信息和IPv4&#x2F;IPv6地址都会被记录（电子邮箱、Cookies信息仅用于评论）。这些信息仅为了改进我们的网站质量和可能的交流沟通。我们不会将这些信息进行展示、出租或出售给任何人。但以下情况除外： 只有透露您的个人资料，才能提供您所要求的产品和服务； 我们需要听从法庭传票、法律命令或遵循法律程序； 我们发现您违反了本站已发布的条款或声明。"},{"title":"分类","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"categories/index.html","permalink":"https://wndbac.cn/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":false,"path":"fcircle/index.html","permalink":"https://wndbac.cn/fcircle/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"friends/index.html","permalink":"https://wndbac.cn/friends/index.html","excerpt":"好 伙 伴","text":"好 伙 伴 欢迎交换友链！ 友链原则 申请格式 前置要求 本站信息请按以下格式申请~123- title: # 站点名称 url: # 访问网址 avatar: # 头像地址 Https 站点（大势所趋） 网站加载速度正常（待定…） 欢迎大佬！(&#x2F;≧▽≦)&#x2F; 免费类域名站点请略过（潜在的不可靠性） 新创站点请略过（建议拥有一定的原创内容） 连接无法打开或存在质量低的内容时，将不会添加 不接受一切商业性或强烈侵入类广告之站点 不接受违反中华人民共和国法律法规之站点 12345title: WindBack # 名称avatar: https://static.wndbac.cn/avatar.jpg # 头像url: https://wndbac.cn # 链接screenshot: https://static.wndbac.cn/screenshot.png # 截图description: 世态人情，可当书读，可作戏看。 # 描述"},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":false,"path":"history/index.html","permalink":"https://wndbac.cn/history/index.html","excerpt":"","text":"建 站 史 2023-04-07 重设UI，关闭阅读更多显示 2023-01-18 更换Artalk评论系统（现已换回Twikoo） 2023-01-10 更换博客域名为wndbac.cn，缩短字符 2022-12-22 更新主题至6.0-pjax版本 2022-11 使用hexo-abbrlink插件生成文章路径 使用hexo-generator-baidu-sitemap插件生成百度网站地图 使用hexo-generator-sitemap生成网站地图 使用hexo-wordcount字数统计和阅读时长插件 2022-10 部署Qexo对博客进行管理 全站使用Pjax实现无刷新加载 添加Twikoo评论系统 使用QexoSays新增说说页面 2022-09-11 使用Hexo作为框架，以Volantis作为主题 2021-07 完全自写html 使用Valine评论系统"},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"messages/index.html","permalink":"https://wndbac.cn/messages/index.html","excerpt":"","text":"🍭欢迎你的来访，请遵守相关法律法规，文明灌水，谢谢合作~"},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":false,"path":"notes/index.html","permalink":"https://wndbac.cn/notes/index.html","excerpt":"","text":""},{"title":"OpenAI API 代理","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"openai/index.html","permalink":"https://wndbac.cn/openai/index.html","excerpt":"","text":"# OpenAI API 代理 由于 OpenAI 及 GFW 的双重限制，国内开发者无法访问 OpenAI 的 API，现提供代理服务地址供开发者**免费**使用。 ✅ 代理地址：[https://openai.wndbac.cn](https://openai.wndbac.cn)，直接替换官方的 [https://api.openai.com](https://api.openai.com)，支持官方所有v1接口。 ⚠️ 本代理服务通过Cloudflare反向代理访问OpenAI的接口，只做代理中转，不会保存任何数据！ 🚨 请勿使用魔法上网的方式用你的 `ApiKey` 去调用 `api.openai.com` 的接口，否则大概率会被 OpenAI 封号！ ## 1、🔔 获取ApiKey 注册 [OpenAI](https://platform.openai.com/account/api-keys) 账号，获取你的 [ApiKey](https://platform.openai.com/account/api-keys)，过程略。 ## 2、💬 聊天接口 #### ⚠️ 不再推荐使用本接口，后面将废弃。 > POST [https://openai.wndbac.cn/pro/chat/completions](https://openai.wndbac.cn/pro/chat/completions) 请求参数 | 参数名 | 类型 | 长度 | 必须 | 备注 | | :----- | :----- | :----- | :----- | :----- | | apiKey | String | 64 | 是 | OpenAI 的 ApiKey | | sessionId | String | 64 | 是 | 会话ID，关联上下文，推荐使用UUID作为sessionId | | content | String | 1000 | 是 | 发送的内容 | 请求示例（**Content-Type = application/json**） 12345&#123; &quot;apiKey&quot;: &quot;&lt;your_openai_api_key&gt;&quot;, &quot;sessionId&quot;: &quot;8d1cb9b0-d535-43a8-b738-4f61b1608579&quot;, &quot;content&quot;: &quot;你是谁？&quot;&#125; 响应示例 12345&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;执行成功&quot;, &quot;data&quot;: &quot;我是一名人工智能助手，用于协助回答问题和提供建议。您可以通过与我进行对话来获取您需要的信息或帮助。&quot;&#125; 本接口使用的是 `gpt-3.5-turbo` 模型，支持通过上下文内容进行连续对话。 本接口对官方的接口进行了封装，开发者只需为每个 `ApiKey` 下的每个会话分配一个独立的 `sessionId` 即可实现连续对话。 推荐使用 uuid 作为 `sessionId` 以保证全局唯一 ，否则对话可能会\"串线\"。 对话中的上下文信息有效期为30分钟，过期后再次发送消息无法关联上下文。 ## 3、✅ 推荐方式 推荐大家直接根据 OpenAI 官方的接口文档开发你的程序。 你只需要将官方接口域名替换为 [https://openai.wndbac.cn](https://openai.wndbac.cn) 即可在国内网络环境下直接调用，支持SSE。 例如将： https://**api.openai.com**/v1/chat/completions 改成 https://**openai.wndbac.cn**/v1/chat/completions 接口URL、请求参数、响应报文等全部与OpenAI官方一致，请直接参考 [OpenAI 官方文档](https://platform.openai.com/docs/introduction) 。 **测试命令** 12345678910111213141516171819202122232425262728293031# 测试聊天curl https://api.openai-proxy.com/v1/chat/completions \\ -H &quot;Content-Type: application/json&quot; \\ -H &quot;Authorization: Bearer &lt;your_openai_api_key&gt;&quot; \\ -d &#x27;&#123; &quot;model&quot;: &quot;gpt-3.5-turbo&quot;, &quot;messages&quot;: [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;&#125;] &#125;&#x27;# 响应结果 &#123; &quot;id&quot;: &quot;chatcmpl-21lvNzPaxlsQJh0BEIb9DqoO0pZUY&quot;, &quot;object&quot;: &quot;chat.completion&quot;, &quot;created&quot;: 1680656905, &quot;model&quot;: &quot;gpt-3.5-turbo-0301&quot;, &quot;usage&quot;: &#123; &quot;prompt_tokens&quot;: 10, &quot;completion_tokens&quot;: 10, &quot;total_tokens&quot;: 20 &#125;, &quot;choices&quot;: [ &#123; &quot;message&quot;: &#123; &quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: &quot;Hello there! How can I assist you today?&quot; &#125;, &quot;finish_reason&quot;: &quot;stop&quot;, &quot;index&quot;: 0 &#125; ]&#125; 12345678910111213141516171819202122# 测试生成图片curl https://api.openai-proxy.com/v1/images/generations \\ -H &quot;Content-Type: application/json&quot; \\ -H &quot;Authorization: Bearer &lt;your_openai_api_key&gt;&quot; \\ -d &#x27;&#123; &quot;prompt&quot;: &quot;A bikini girl&quot;, &quot;n&quot;: 2, &quot;size&quot;: &quot;512x512&quot; &#125;&#x27;# 响应结果 &#123; &quot;created&quot;: 1680705608, &quot;data&quot;: [ &#123; &quot;url&quot;: &quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-xxxxxxx&quot; &#125;, &#123; &quot;url&quot;: &quot;https://oaidalleapiprodscus.blob.core.windows.net/private/org-xxxxxxx&quot; &#125; ]&#125; **如何通过OpenAI官方的接口实现连续对话？** 有很多用户问如何实现连续聊天，官方文档其实写的很清楚 [https://platform.openai.com/docs/guides/chat/introduction](https://platform.openai.com/docs/guides/chat/introduction) > Chat models take a series of messages as input, and return a model-generated message as output. > > 聊天模型将一系列消息作为输入，并返回模型生成的消息作为输出。 下面是官方Python语言实现连续聊天的代码示例，主要看这个 messges 数组： 123456789101112# Note: you need to be using OpenAI Python v0.27.0 for the code below to workimport openaiopenai.ChatCompletion.create( model=&quot;gpt-3.5-turbo&quot;, messages=[ &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a helpful assistant.&quot;&#125;, &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Who won the world series in 2020?&quot;&#125;, &#123;&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: &quot;The Los Angeles Dodgers won the World Series in 2020.&quot;&#125;, &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Where was it played?&quot;&#125; ]) role为user是用户发送的内容，role为assistant是AI回答的内容。 OpenAI本身是没有记忆的，如果你不告诉他你之前说了什么以及他之前回答了什么，那么他只会根据你最近一次发送的内容进行回答。 所以，要想实现“连续对话”，每次发送消息时，你需要将你之前发送的内容(**user**)以及OpenAI之前返回的内容(**assistant**)，再结合你本次想发送的内容(**user**) 按 **时序** 组合成一个 messages[] 数组，然后再将这个数组发送给OpenAI就行了，就是这么简单。 有一点需要注意，这样虽然可以实现“连续对话”，但势必造成每次发送的消息内容会非常多，而OpenAI是按字数计费的，所以你需要根据你口袋里的钞票去衡量每次应该携带几条聊天记录比较合适。 ## 4、⭐️ 第三方应用 如果你用的是第三方开发者开发的基于 OpenAI 的应用，你也可以直接把 [https://openai.wndbac.cn](https://openai.wndbac.cn) 设为其代理接口地址，这样就直接可以在国内网络环境下使用该应用。比如下列几个应用： | 名称 | GitHub地址 | Stars | | :----- | :----- | :----- | | OpenAI-Translator | https://github.com/yetone/openai-translator | ![](https://img.shields.io/github/stars/yetone/openai-translator.svg) | | ChatGPT-Next-Web | https://github.com/Yidadaa/ChatGPT-Next-Web | ![](https://img.shields.io/github/stars/Yidadaa/ChatGPT-Next-Web.svg) | | ChatGPT-Web | https://github.com/Chanzhaoyu/chatgpt-web | ![](https://img.shields.io/github/stars/Chanzhaoyu/chatgpt-web.svg) | ## 5、💰 查询余额 接口地址 (**GET请求**) > GET [https://api.openai-proxy.com/pro/balance?apiKey=sk-xxxxxxxxxxxxxx](https://api.openai-proxy.com/pro/balance?apiKey=sk-xxxxxxxxxxxxxx) 请求参数 | 参数名 | 类型 | 长度 | 必须 | 备注 | | :----- | :----- | :----- | :----- | :----- | | apiKey | String | 64 | 是 | OpenAI 的 ApiKey | 相应示例 123456789&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;执行成功&quot;, &quot;data&quot;: &#123; &quot;total&quot;: 18.00, &quot;balance&quot;: 17.92, &quot;used&quot;: 0.08 &#125;&#125; 原OpenAI官方后台查询余额的接口由于被用户滥用，官方给撤销了，现有一个折中的方式去计算账户余额。逻辑是先得到OpenAI给你账户授权的总金额，然后减去最近90天你账户消耗的金额，得到的 balance 即为账户可用余额。如果你的账号已使用超过90天，此计算方式会存在误差，如果想知道准确的数据，请登录OpenAI官网查看，目前别无他法。 --- Email：[towindback@qq.com](mailto:towindback@qq.com) 体验ChatGPT：https://chat.wndbac.cn 更新时间：2023-04-15"},{"title":"标签","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"tags/index.html","permalink":"https://wndbac.cn/tags/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"talks/index.html","permalink":"https://wndbac.cn/talks/index.html","excerpt":"","text":"showQexoTalks(\"qexot\", \"https://admin.wndbac.cn\", 5)"},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":true,"path":"virus/index.html","permalink":"https://wndbac.cn/virus/index.html","excerpt":"","text":""},{"title":"","date":"2023-04-15T09:30:39.718Z","updated":"2023-04-15T09:30:39.718Z","comments":false,"path":"welcome/index.html","permalink":"https://wndbac.cn/welcome/index.html","excerpt":"","text":""}],"posts":[{"title":"优化站点访问速","slug":"优化站点访问速","date":"2023-03-11T08:48:25.000Z","updated":"2023-04-09T03:13:54.000Z","comments":true,"path":"c6a56fac/","link":"","permalink":"https://wndbac.cn/c6a56fac/","excerpt":"","text":"前言我们的站点通常会使用一些CDN来进行加速，例如 jsDelivr, UNPKG 等，但是它们在境内的加速效果都不是很理想。 解决方法Cloudflare在全球速度都是相对较快的，所以本站选择使用Cloudflare进行反代以上的CDN服务以解决它们在境内速度慢的问题。 注：如若没有 Cloudflare 账号，要先去注册一个，并与 GitHub 连接。 源代码index.html 123&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt; window.location.href = &#x27;https://cdn.wndbac.cn&#x27;;&lt;/script&gt; _worker.js 12345678910111213export default &#123; async fetch(request, env) &#123; const url = new URL(request.url); url.host = &quot;cdn.jsdelivr.net&quot;; // openai is already set all CORS heasders return fetch(url, &#123; headers: request.headers, method: request.method, body: request.body, redirect: &#x27;follow&#x27; &#125;); &#125;&#125; 将以上代码导入 Cloudflare Pages ，然后绑定自己的域名（可无），就大功告成了。 注：index文件其实即为一个重定向，请将 https://cdn.wndbac.cn 替换为自己的域名或后面Cloudflare分配的域名。 使用123npm: https://domain/npm/package@version/fileGitHub: https://domain/gh/user/repo@version/fileWordPress: https://domain/wp/plugins/project/tags/version/file 更多可访问 jsDelivr 官网查看： jsDelivr 只需将 cdn.jsdelivr.net 替换为你部署反代服务的域名即可。 同理：反代其它站点亦可以参照上述代码，但若别人开启了禁止反代等保护措施，即无效。","categories":[{"name":"博客","slug":"博客","permalink":"https://wndbac.cn/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://wndbac.cn/tags/Cloudflare/"}]},{"title":"为你的博客挂上灯笼","slug":"为你的博客挂上灯笼","date":"2023-01-13T04:55:58.000Z","updated":"2023-04-09T03:18:09.000Z","comments":true,"path":"a7e70425/","link":"","permalink":"https://wndbac.cn/a7e70425/","excerpt":"","text":"引言灯花助春意，舞绶织欢心。新的一年，新的气象，快来为你的博客挂上漂漂亮亮的小🏮吧！ 本教程直接引入 @韩小韩 的 API 接口，以便实现最简化调用。如若担心此接口失效，可参考 @Xlenco 的 这篇 文章以获得帮助。 开始教程引入代码如下： 12&lt;!-- lanters --&gt;&lt;script src=&quot;https://api.vvhan.com/api/denglong2&quot;&gt;&lt;/script&gt; 本教程以 Volantis 主题为例 在根目录下 soure 文件夹中新建 _volantis&#x2F;bodyEnd.ejs 文件 文件填写上述引入代码即可 注：记得 hexo clean 哦，以防止改动未生效 结尾至此，你的博客已经挂上了漂亮的迎春灯笼🎉🎉🎉，效果如下图所示： demo 如上教程，亦可以引入其它 API 来实现此类效果，万变不离其宗！","categories":[{"name":"教程","slug":"教程","permalink":"https://wndbac.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://wndbac.cn/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://wndbac.cn/tags/Volantis/"}]},{"title":"搭建一个Hexo博客","slug":"搭建一个Hexo博客","date":"2023-01-06T07:08:25.000Z","updated":"2023-04-09T03:20:01.000Z","comments":true,"path":"6e838c40/","link":"","permalink":"https://wndbac.cn/6e838c40/","excerpt":"","text":"简介Hexo是一款基于Nodejs的，快速、简洁且高效的博客框架。具有丰富的插件和主题，具有超快的速度。支持Makedown语法，可以方便快捷的编写博客文档。同时支持node命令，可以一键部署到GitHub Pages, Heroku等其他平台。 Hexo搭建1、安装 安装git 安装node 检测是否安装成功 12node -vnpm -v 安装hexo 1npm install hexo-cli -g 2、初始化博客1hexo init 如操作过程中出现卡住问题可执行Ctrl + C命令终止程序 1npm install 3、配置主题转到theme文件夹下 1git clone 主题的地址 修改配置文件 打开博客根目录的_config.yml文件，找到theme这一行，修改主题名字 1theme: 主题名字 4、上传 请先配置Git的SSH密钥等信息 安装上传插件 1npm install hexo-deployer-git --save 上传 12hexo cleanhexo g -d 到这里，我们其实已经完成了搭建，但是Hexo有一个很大的缺点，就是每次部署推送都要在本地 解决方法：使用Hexo编辑器或Codespaces对博客进行管理 管理1、推送 如果想要使用编辑器来管理博客，那么请忽略上面的上传静态文件命令 请直接把文件夹中的所有文件直接推送到GitHub仓库（推送教程不过多阐述，自行百度） 如果上传了很久依然没有上传完成，那么请在博客根目录下新建一个.gitignore文件 内容： 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 新建完成后，请再次进行推送 2、线上写文章&#x2F;改配置 使用 GitHub Codespaces； 使用 Qexo； 使用 HexoPlusPlus； 更多… … 3、部署因GitHub无法直接处理Hexo根目录下的文件 所以为使Hexo博客运行，这里推荐使用 Vercel 进行部署，亦或使用 GitHub Actions 自动化部署，这里选择前者 Vercel 请先将账号与GitHub连接 点击右上角Add New，点开 Project选项 在弹出的仓库中选择你部署Hexo原文件的仓库，点击Import按键 到这个页面，点击Deploy按键，等待部署完成 部署完成后，Vercel会分配给你一个子域名，但可惜的是*.vercel.app域名在大陆地区被电信运营商 DNS 污染，无法直接访问。解决方法：绑定域名（一个域名一年也就几十块钱，建议自己从阿里云或者腾讯云购买一个域名）","categories":[{"name":"教程","slug":"教程","permalink":"https://wndbac.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://wndbac.cn/tags/Hexo/"}]},{"title":"你好2023","slug":"你好2023","date":"2023-01-01T12:55:38.000Z","updated":"2023-04-09T03:19:10.000Z","comments":true,"path":"1006cd9b/","link":"","permalink":"https://wndbac.cn/1006cd9b/","excerpt":"","text":"2022年已经过去，2023年也已经到来。 时间告诉我，无理取闹的年纪已经过去，该努力了。 希望多年以后，都会如我们所愿。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://wndbac.cn/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]}],"categories":[{"name":"博客","slug":"博客","permalink":"https://wndbac.cn/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"教程","slug":"教程","permalink":"https://wndbac.cn/categories/%E6%95%99%E7%A8%8B/"},{"name":"随笔","slug":"随笔","permalink":"https://wndbac.cn/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://wndbac.cn/tags/Cloudflare/"},{"name":"Hexo","slug":"Hexo","permalink":"https://wndbac.cn/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://wndbac.cn/tags/Volantis/"}]}